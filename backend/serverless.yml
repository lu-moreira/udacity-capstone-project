service:
  name: wallscratch-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    SCRATCH_TABLE: wallscratch-001-${self:provider.stage}
    SCRATCH_TABLE_ARN: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SCRATCH_TABLE}"
    FILE_UPLOAD_S3_BUCKET: lmm-br-wallscratch-files-bucket-0001-${self:provider.stage}
    USER_INDEX_NAME: user-index
    AVAILABLE_INDEX_NAME: available-index
    CLOUD_REGION: ${self:provider.region}

custom:
  documentation:
    api:
      info:
        version: v0.0.1
        title: WallScratch
        description: Serverless wallscratch app
    models:
      - name: CreateRequest
        contentType: application/json
        schema: ${file(httpcontracts/create-request-schema.json)}
      - name: UpdateRequest
        contentType: application/json
        schema: ${file(httpcontracts/update-request-schema.json)}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetAllAvailables:
    handler: src/lambda/http/getByAvailable.handler
    events:
      - http:
          method: get
          path: scratches
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action: 
          - dynamodb:Scan
          - dynamodb:Query
        Resource: ${self:provider.environment.SCRATCH_TABLE_ARN}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SCRATCH_TABLE}/index/${self:provider.environment.AVAILABLE_INDEX_NAME}
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  GetAllByUser:
    handler: src/lambda/http/getByUser.handler
    events:
      - http:
          method: get
          path: scratches/me
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action: 
          - dynamodb:Scan
          - dynamodb:Query
        Resource: ${self:provider.environment.SCRATCH_TABLE_ARN}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SCRATCH_TABLE}/index/${self:provider.environment.USER_INDEX_NAME}
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  Create:
    handler: src/lambda/http/create.handler
    events:
      - http:
          method: post
          path: scratches
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            sumary: Create a new scratch item
            description: Create a new scratch item
            requestModels:
              'application/json': CreateRequest
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: ${self:provider.environment.SCRATCH_TABLE_ARN}
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  Update:
    handler: src/lambda/http/update.handler
    events:
      - http:
          method: patch
          path: scratches/{scratchId}
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            sumary: Update an scratch
            description: Update an scratch 
            requestModels:
              'application/json': UpdateRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem # Get item to obtain current value "defaults" before updating
          - dynamodb:UpdateItem
        Resource: ${self:provider.environment.SCRATCH_TABLE_ARN}
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  UpdateLike:
    handler: src/lambda/http/like.handler
    events:
      - http:
          method: patch
          path: scratches/{scratchId}/{typeLike}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem # Get item to obtain current value "defaults" before updating
          - dynamodb:UpdateItem
        Resource: ${self:provider.environment.SCRATCH_TABLE_ARN}
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
          
  Delete:
    handler: src/lambda/http/delete.handler
    events:
      - http:
          method: delete
          path: scratches/{scratchId}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:DeleteItem
        Resource: ${self:provider.environment.SCRATCH_TABLE_ARN}
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: scratches/{scratchId}/attachment
          cors: true
    iamRolesStatement:
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    ScratchDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: available
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.SCRATCH_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_INDEX_NAME}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index
          - IndexName: ${self:provider.environment.AVAILABLE_INDEX_NAME}
            KeySchema:
              - AttributeName: available
                KeyType: HASH
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    UploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.FILE_UPLOAD_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: ScratchBucketPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: "*"
              Action: ["s3:GetObject", "s3:Put*"]
              Resource: "arn:aws:s3:::${self:provider.environment.FILE_UPLOAD_S3_BUCKET}/*"
        Bucket: { Ref: UploadBucket }
